/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace Marketplace {
      
    export type ItemStruct = {name: string, description: string, price: BigNumberish, seller: AddressLike, status: BigNumberish, createdAt: BigNumberish}

    export type ItemStructOutput = [name: string, description: string, price: bigint, seller: string, status: bigint, createdAt: bigint] & {name: string, description: string, price: bigint, seller: string, status: bigint, createdAt: bigint }
  
    }

  export interface MarketplaceInterface extends Interface {
    getFunction(nameOrSignature: "addAdmin" | "admins" | "cancelOrder" | "confirmReceipt" | "getItem" | "getOrderCount" | "itemCounter" | "items" | "listItem" | "markAsShipped" | "orderCounter" | "orders" | "purchaseItem" | "raiseDispute" | "resolveDispute" | "userItems"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AdminAdded" | "DisputeRaised" | "DisputeResolved" | "ItemListed" | "ItemShipped" | "OrderCancelled" | "OrderCompleted" | "OrderCreated" | "UnexpectedPayment"): EventFragment;

    encodeFunctionData(functionFragment: 'addAdmin', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'admins', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'cancelOrder', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'confirmReceipt', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getItem', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getOrderCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'itemCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'items', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'listItem', values: [string, string, BigNumberish]): string;
encodeFunctionData(functionFragment: 'markAsShipped', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'orderCounter', values?: undefined): string;
encodeFunctionData(functionFragment: 'orders', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'purchaseItem', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'raiseDispute', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'resolveDispute', values: [BigNumberish, boolean]): string;
encodeFunctionData(functionFragment: 'userItems', values: [AddressLike, BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addAdmin', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'admins', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'cancelOrder', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'confirmReceipt', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getItem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getOrderCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'itemCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'items', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'listItem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'markAsShipped', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orderCounter', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'orders', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'purchaseItem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'raiseDispute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'resolveDispute', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'userItems', data: BytesLike): Result;
  }

  
    export namespace AdminAddedEvent {
      export type InputTuple = [newAdmin: AddressLike];
      export type OutputTuple = [newAdmin: string];
      export interface OutputObject {newAdmin: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DisputeRaisedEvent {
      export type InputTuple = [orderId: BigNumberish, raiser: AddressLike];
      export type OutputTuple = [orderId: bigint, raiser: string];
      export interface OutputObject {orderId: bigint, raiser: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DisputeResolvedEvent {
      export type InputTuple = [orderId: BigNumberish, resolver: AddressLike, amount: BigNumberish];
      export type OutputTuple = [orderId: bigint, resolver: string, amount: bigint];
      export interface OutputObject {orderId: bigint, resolver: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ItemListedEvent {
      export type InputTuple = [itemId: BigNumberish, seller: AddressLike];
      export type OutputTuple = [itemId: bigint, seller: string];
      export interface OutputObject {itemId: bigint, seller: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ItemShippedEvent {
      export type InputTuple = [orderId: BigNumberish];
      export type OutputTuple = [orderId: bigint];
      export interface OutputObject {orderId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderCancelledEvent {
      export type InputTuple = [orderId: BigNumberish, buyer: AddressLike, amount: BigNumberish];
      export type OutputTuple = [orderId: bigint, buyer: string, amount: bigint];
      export interface OutputObject {orderId: bigint, buyer: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderCompletedEvent {
      export type InputTuple = [orderId: BigNumberish, seller: AddressLike, amount: BigNumberish];
      export type OutputTuple = [orderId: bigint, seller: string, amount: bigint];
      export interface OutputObject {orderId: bigint, seller: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace OrderCreatedEvent {
      export type InputTuple = [orderId: BigNumberish, itemId: BigNumberish, buyer: AddressLike, seller: AddressLike];
      export type OutputTuple = [orderId: bigint, itemId: bigint, buyer: string, seller: string];
      export interface OutputObject {orderId: bigint, itemId: bigint, buyer: string, seller: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace UnexpectedPaymentEvent {
      export type InputTuple = [sender: AddressLike, amount: BigNumberish];
      export type OutputTuple = [sender: string, amount: bigint];
      export interface OutputObject {sender: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Marketplace extends BaseContract {
    
    connect(runner?: ContractRunner | null): Marketplace;
    waitForDeployment(): Promise<this>;

    interface: MarketplaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addAdmin: TypedContractMethod<
      [_newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    admins: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    cancelOrder: TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    confirmReceipt: TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    getItem: TypedContractMethod<
      [_itemId: BigNumberish, ],
      [Marketplace.ItemStructOutput],
      'view'
    >
    

    
    getOrderCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    itemCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    items: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, bigint, bigint] & {name: string, description: string, price: bigint, seller: string, status: bigint, createdAt: bigint }],
      'view'
    >
    

    
    listItem: TypedContractMethod<
      [_name: string, _description: string, _price: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    markAsShipped: TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    orderCounter: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    orders: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint] & {itemId: bigint, buyer: string, seller: string, amount: bigint, status: bigint, createdAt: bigint }],
      'view'
    >
    

    
    purchaseItem: TypedContractMethod<
      [_itemId: BigNumberish, ],
      [void],
      'payable'
    >
    

    
    raiseDispute: TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    resolveDispute: TypedContractMethod<
      [_orderId: BigNumberish, _favorBuyer: boolean, ],
      [void],
      'nonpayable'
    >
    

    
    userItems: TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addAdmin'): TypedContractMethod<
      [_newAdmin: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'admins'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'cancelOrder'): TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'confirmReceipt'): TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getItem'): TypedContractMethod<
      [_itemId: BigNumberish, ],
      [Marketplace.ItemStructOutput],
      'view'
    >;
getFunction(nameOrSignature: 'getOrderCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'itemCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'items'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, string, bigint, string, bigint, bigint] & {name: string, description: string, price: bigint, seller: string, status: bigint, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'listItem'): TypedContractMethod<
      [_name: string, _description: string, _price: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'markAsShipped'): TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'orderCounter'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'orders'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, string, bigint, bigint, bigint] & {itemId: bigint, buyer: string, seller: string, amount: bigint, status: bigint, createdAt: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'purchaseItem'): TypedContractMethod<
      [_itemId: BigNumberish, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'raiseDispute'): TypedContractMethod<
      [_orderId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'resolveDispute'): TypedContractMethod<
      [_orderId: BigNumberish, _favorBuyer: boolean, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'userItems'): TypedContractMethod<
      [arg0: AddressLike, arg1: BigNumberish, ],
      [bigint],
      'view'
    >;

    getEvent(key: 'AdminAdded'): TypedContractEvent<AdminAddedEvent.InputTuple, AdminAddedEvent.OutputTuple, AdminAddedEvent.OutputObject>;
getEvent(key: 'DisputeRaised'): TypedContractEvent<DisputeRaisedEvent.InputTuple, DisputeRaisedEvent.OutputTuple, DisputeRaisedEvent.OutputObject>;
getEvent(key: 'DisputeResolved'): TypedContractEvent<DisputeResolvedEvent.InputTuple, DisputeResolvedEvent.OutputTuple, DisputeResolvedEvent.OutputObject>;
getEvent(key: 'ItemListed'): TypedContractEvent<ItemListedEvent.InputTuple, ItemListedEvent.OutputTuple, ItemListedEvent.OutputObject>;
getEvent(key: 'ItemShipped'): TypedContractEvent<ItemShippedEvent.InputTuple, ItemShippedEvent.OutputTuple, ItemShippedEvent.OutputObject>;
getEvent(key: 'OrderCancelled'): TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
getEvent(key: 'OrderCompleted'): TypedContractEvent<OrderCompletedEvent.InputTuple, OrderCompletedEvent.OutputTuple, OrderCompletedEvent.OutputObject>;
getEvent(key: 'OrderCreated'): TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
getEvent(key: 'UnexpectedPayment'): TypedContractEvent<UnexpectedPaymentEvent.InputTuple, UnexpectedPaymentEvent.OutputTuple, UnexpectedPaymentEvent.OutputObject>;

    filters: {
      
      'AdminAdded(address)': TypedContractEvent<AdminAddedEvent.InputTuple, AdminAddedEvent.OutputTuple, AdminAddedEvent.OutputObject>;
      AdminAdded: TypedContractEvent<AdminAddedEvent.InputTuple, AdminAddedEvent.OutputTuple, AdminAddedEvent.OutputObject>;
    

      'DisputeRaised(uint256,address)': TypedContractEvent<DisputeRaisedEvent.InputTuple, DisputeRaisedEvent.OutputTuple, DisputeRaisedEvent.OutputObject>;
      DisputeRaised: TypedContractEvent<DisputeRaisedEvent.InputTuple, DisputeRaisedEvent.OutputTuple, DisputeRaisedEvent.OutputObject>;
    

      'DisputeResolved(uint256,address,uint256)': TypedContractEvent<DisputeResolvedEvent.InputTuple, DisputeResolvedEvent.OutputTuple, DisputeResolvedEvent.OutputObject>;
      DisputeResolved: TypedContractEvent<DisputeResolvedEvent.InputTuple, DisputeResolvedEvent.OutputTuple, DisputeResolvedEvent.OutputObject>;
    

      'ItemListed(uint256,address)': TypedContractEvent<ItemListedEvent.InputTuple, ItemListedEvent.OutputTuple, ItemListedEvent.OutputObject>;
      ItemListed: TypedContractEvent<ItemListedEvent.InputTuple, ItemListedEvent.OutputTuple, ItemListedEvent.OutputObject>;
    

      'ItemShipped(uint256)': TypedContractEvent<ItemShippedEvent.InputTuple, ItemShippedEvent.OutputTuple, ItemShippedEvent.OutputObject>;
      ItemShipped: TypedContractEvent<ItemShippedEvent.InputTuple, ItemShippedEvent.OutputTuple, ItemShippedEvent.OutputObject>;
    

      'OrderCancelled(uint256,address,uint256)': TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
      OrderCancelled: TypedContractEvent<OrderCancelledEvent.InputTuple, OrderCancelledEvent.OutputTuple, OrderCancelledEvent.OutputObject>;
    

      'OrderCompleted(uint256,address,uint256)': TypedContractEvent<OrderCompletedEvent.InputTuple, OrderCompletedEvent.OutputTuple, OrderCompletedEvent.OutputObject>;
      OrderCompleted: TypedContractEvent<OrderCompletedEvent.InputTuple, OrderCompletedEvent.OutputTuple, OrderCompletedEvent.OutputObject>;
    

      'OrderCreated(uint256,uint256,address,address)': TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
      OrderCreated: TypedContractEvent<OrderCreatedEvent.InputTuple, OrderCreatedEvent.OutputTuple, OrderCreatedEvent.OutputObject>;
    

      'UnexpectedPayment(address,uint256)': TypedContractEvent<UnexpectedPaymentEvent.InputTuple, UnexpectedPaymentEvent.OutputTuple, UnexpectedPaymentEvent.OutputObject>;
      UnexpectedPayment: TypedContractEvent<UnexpectedPaymentEvent.InputTuple, UnexpectedPaymentEvent.OutputTuple, UnexpectedPaymentEvent.OutputObject>;
    
    };
  }